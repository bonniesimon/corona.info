{"version":3,"sources":["components/result/Result.js","components/searchResults/SearchResults.js","components/home/Home.js","App.js","serviceWorker.js","index.js"],"names":["Result","data","className","undefined","country","cases","recovered","deaths","casesPerOneMillion","SearchResults","useState","value","setValue","dataSet","setDataSet","getApiData","a","fetch","results","json","console","log","onSubmit","e","preventDefault","toLowerCase","type","placeholder","onChange","textInput","target","Home","App","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oYAkCeA,G,YA7BA,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAEb,OACI,yBAAKC,UAAU,qBACX,wBAAIA,UAAU,8BAAd,SAA8DC,IAAjBF,EAAKG,QAAwBH,EAAKG,QAAU,sBAAzF,KACA,yBAAKF,UAAU,2BACX,yBAAKA,UAAU,WACX,uBAAGA,UAAU,cAAwBC,IAAfF,EAAKI,MAAsBJ,EAAKI,MAAQ,GAA9D,KACA,uBAAGH,UAAU,4BAAsCC,IAAfF,EAAKI,MAAsB,aAAc,KAEjF,yBAAKH,UAAU,WACX,uBAAGA,UAAU,cAA4BC,IAAnBF,EAAKK,UAA0BL,EAAKK,UAAY,IACtE,uBAAGJ,UAAU,2BAAyCC,IAAnBF,EAAKK,UAA0B,YAAc,KAEpF,yBAAKJ,UAAU,WACX,uBAAGA,UAAU,cAAyBC,IAAhBF,EAAKM,OAAuBN,EAAKM,OAAS,IAChE,uBAAGL,UAAU,yBAAoCC,IAAhBF,EAAKM,OAAuB,SAAW,MAGhF,yBAAKL,UAAU,2BACX,yBAAKA,UAAU,OACX,uBAAGA,UAAU,cAAqCC,IAA5BF,EAAKO,mBAAmCP,EAAKO,mBAAqB,IACxF,uBAAGN,UAAU,cAAqCC,IAA5BF,EAAKO,mBAAmC,oBAAsB,SCwCzFC,EAzDO,WAAO,IAAD,EACEC,mBAAS,IADX,mBACjBC,EADiB,KACVC,EADU,OAEMF,mBAAS,IAFf,mBAEjBG,EAFiB,KAERC,EAFQ,KASlBC,EAAU,uCAAG,WAAOX,GAAP,iBAAAY,EAAA,sEACOC,MAAM,sDAAD,OAAuDb,IADnE,cACTc,EADS,gBAEIA,EAAQC,OAFZ,OAETlB,EAFS,OAGfmB,QAAQC,IAAIpB,GACZa,EAAWb,GAJI,2CAAH,sDA+BhB,OACI,yBAAKC,UAAU,4BACX,0BAAMA,UAAU,iCAAiCoB,SAnBtC,SAACC,GAChBA,EAAEC,iBACEb,EAIJI,EAAWJ,EAAMc,eAHbL,QAAQC,IAAI,uBAiBR,2BACCK,KAAK,OACLf,MAAOA,EACPgB,YAAY,oBACZzB,UAAU,wCACV0B,SA/BO,SAACL,GACjB,IAAMM,EAAYN,EAAEO,OAAOnB,MAE3BC,EAASiB,MA8BD,4BAAQ3B,UAAU,uCAAlB,WAEJ,kBAAC,EAAD,CAAQD,KAAMY,MC3CXkB,EATF,WACT,OACI,yBAAK7B,UAAU,kBACX,wBAAIA,UAAU,2BAAd,eACA,kBAAC,EAAD,QCOG8B,MAbf,WACC,OACC,yBAAK9B,UAAU,OACd,kBAAC,EAAD,MACS,4BAAQA,UAAU,UACd,uBAAGA,UAAU,gBAAb,cAAuC,uBAAGA,UAAU,eAAe+B,KAAK,0BAAjC,gBAAvC,KAAmH,uBAAG/B,UAAU,eAAe+B,KAAK,sCAAjC,QAAnH,QCDIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.7ee08450.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\n//CSS\r\nimport './Result.css'\r\n\r\nconst Result = ({data}) => {\r\n    \r\n    return (\r\n        <div className=\"results-container\">\r\n            <h3 className=\"results-container__heading\"> {data.country !== undefined ? data.country : 'Stay Home Stay Safe'} </h3>\r\n            <div className=\"results-container__row1\">\r\n                <div className=\"col col\">\r\n                    <p className=\"large\">{data.cases !== undefined ? data.cases : ''} </p>\r\n                    <p className=\"small small--yellow\">{data.cases !== undefined ? 'Confirmed ': ''}</p>\r\n                </div>\r\n                <div className=\"col col\">\r\n                    <p className=\"large\">{data.recovered !== undefined ? data.recovered : ''}</p>\r\n                    <p className=\"small small--green\">{data.recovered !== undefined ? 'Recovered' : ''}</p>                    \r\n                </div>\r\n                <div className=\"col col\">\r\n                    <p className=\"large\">{data.deaths !== undefined ? data.deaths : ''}</p>\r\n                    <p className=\"small small--red\">{data.deaths !== undefined ? 'Deaths' : ''}</p>                    \r\n                </div>\r\n            </div>\r\n            <div className=\"results-container__row2\">\r\n                <div className=\"col\">\r\n                    <p className=\"large\">{data.casesPerOneMillion !== undefined ? data.casesPerOneMillion : ''}</p>\r\n                    <p className=\"small\">{data.casesPerOneMillion !== undefined ? \"Cases / 1 million\" : ''}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Result\r\n","import React, {useState, useEffect} from 'react';\r\n\r\n//CSS\r\nimport './SearchResults.css';\r\n\r\n//Children\r\nimport Result from \"../result/Result\";\r\n\r\n\r\n\r\nconst SearchResults = () => {\r\n    const [value, setValue] = useState('');\r\n    const [dataSet, setDataSet] = useState({});\r\n\r\n\r\n    /**\r\n     * TODO: get data from api and return json data from this function. \r\n     * @param : countryName\r\n     */\r\n    const getApiData = async (country) => {\r\n        const results = await fetch(`https://coronavirus-19-api.herokuapp.com/countries/${country}`);\r\n        const data = await results.json();\r\n        console.log(data);\r\n        setDataSet(data);\r\n        \r\n    }\r\n\r\n    const updateValue = (e) => {\r\n        const textInput = e.target.value;\r\n        // console.log(textInput)\r\n        setValue(textInput);\r\n    }\r\n\r\n    const formSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(!value){\r\n            console.log(\"No Search input!!\");\r\n            return;\r\n        }\r\n        getApiData(value.toLowerCase());\r\n        \r\n    }\r\n\r\n    /**\r\n     * *Runs first time the page loads\r\n     */\r\n    // useEffect(() => {\r\n    //     getApiData();\r\n    // }, [])\r\n\r\n    return (\r\n        <div className=\"search-results-container\" >\r\n            <form className=\"search-results-container__form\" onSubmit={formSubmit}>\r\n                <input\r\n                 type=\"text\" \r\n                 value={value}\r\n                 placeholder=\"Search Country...\" \r\n                 className=\"search-results-container__form__input\"\r\n                 onChange={updateValue}\r\n                 />\r\n                <button className=\"search-results-container__form__btn\">Search</button>\r\n            </form>\r\n            <Result data={dataSet}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchResults\r\n","import React from 'react'\r\n\r\n\r\n// CSS\r\nimport './Home.css';\r\n\r\n//components\r\nimport SearchResults from '../searchResults/SearchResults';\r\n\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div className=\"home-container\">\r\n            <h1 className=\"home-container__heading\">Corona Info</h1>\r\n            <SearchResults/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react';\n// import { Switch, Route, Link } from 'react-router-dom';\nimport './App.css';\n\n\n//Components\nimport Home from './components/home/Home';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Home/>\n            <footer className=\"footer\">\n                <p className=\"footer__text\">Created by <a className=\"footer__link\" href=\"github.com/bonniesimon\">Bonnie Simon</a>. <a className=\"footer__link\" href=\"github.com/bonniesimon/corona.info\">Repo</a> </p>\n            </footer>\n\t\t</div>\n\t);\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}